;-*-org-*-
jail file system: recreate on startup, but mount /jail/home as tmpfs.
make sure swap partition is big enough to support /jail/home via
tmpfs. This way if server has enough memory then /jail/home access
will be much faster.
check if everything else can be doe via read-only binds instead of
populating.

"systemd-nspawn" could be used on systemd-based system, but will
require rewriting the server not to chroot into the jail, but run
within the jail.

Another possible approach: instead of recreating it on each startup,
mount necessary bits and pieces using overlayfs. overlayfs was added
to the kernel 3.18.0. Jessie still uses 3.16.0. AuFS can be used to
stack up filesystems

mount -t aufs br:template_etc=ro:/etc=ro none /jail/etc 

with the above command executed, files within template_etc will hide
the files with the same names from the actual /etc directory

currently the startup script populates the $JAILPTAH/etc/passwd and
$JAILPATH/etc/group files with autogenerated user and group
names. Prisoner users are called p{n}, where MIN_PRISONER_UGID <= n <=
MAX_PRISONER_UGID.

Default values for MIN_PRISONER_UGID and MAX_PRISONER_UGID is 10000
and 20000 respecively.

* TODO [2/5]
- [X] make sure binaries are installed in to /usr/local/sbin
- [X] create and populate /usr/local/var/vpl-jail-system/etc folder
  (needs properly populated passwd and group files).
- [ ] modify startup script to properly build /jail filesystem
- [ ] create and populate /usr/local/var/vpl-jail-system/home folder
   (pre-create all home direcotires)
- [ ] when layering /home directory use tmpfs as "write" storage 
   (make sure swap is big enough to do so) 
